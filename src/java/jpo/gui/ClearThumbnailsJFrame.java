package jpo.gui;

import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import jpo.dataModel.Settings;
import jpo.dataModel.XmlReader;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author Richard Eigenmann
 */
public class ClearThumbnailsJFrame extends javax.swing.JFrame {

    /**
     * Defines a LOGGER for this class
     */
    private static final Logger LOGGER = Logger.getLogger( XmlReader.class.getName() );

    /**
     * Creates new form ClearThumbnailsJFrame
     *
     * @param lowresUrls
     */
    public ClearThumbnailsJFrame( StringBuilder lowresUrls ) {
        initComponents();
        setLocationRelativeTo( Settings.anchorFrame );
        this.lowresUrls.setText( lowresUrls.toString() );
        stopButton.setVisible( false );
        closeButton.setVisible( false );
        setVisible( true );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lowresUrls = new javax.swing.JTextArea();
        closeButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("JPO now has an improved cache for thumbnail pictures. The old thumbnail images should be removed.");
        jTextArea1.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Remove Old Thumbnails");

        jLabel2.setText("You will only be asked once!");

        lowresUrls.setColumns(20);
        lowresUrls.setRows(5);
        jScrollPane2.setViewportView(lowresUrls);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton))
                    .addComponent(jScrollPane2)
                    .addComponent(jTextArea1))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(325, 325, 325))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(closeButton)
                    .addComponent(removeButton)
                    .addComponent(stopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible( false );
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        stopButton.setVisible( true );
        removeButton.setVisible( false );
        thumbnailRemover.execute();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        thumbnailRemover.cancel( true );
    }//GEN-LAST:event_stopButtonActionPerformed

    private ThumbnailRemover thumbnailRemover = new ThumbnailRemover();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea lowresUrls;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

    private class ThumbnailRemover extends SwingWorker<Void, String> {

        boolean firsttime = true;

        @Override
        protected Void doInBackground() {
            publish( "Log:\n" );
            String[] lines = lowresUrls.getText().split( System.getProperty( "line.separator" ) );
            for ( String line : lines ) {
                if ( isCancelled() ) {
                    publish( "Removal cancelled." );
                    break;
                }

                line = StringUtils.chomp( line );
                if ( line.equals( "")) {
                    continue;
                }

                URI uri;
                try {
                    uri = new URI( line );
                } catch ( URISyntaxException ex ) {
                    LOGGER.severe( ex.getLocalizedMessage() );
                    publish( line + "   doesn't parse to a file --> nothing to delete --> OK\n" );
                    continue;
                }

                File thumbnail = new File( uri );

                if ( !thumbnail.exists() ) {
                    publish( line + "   doesn't exist. --> nothing to delete --> OK\n" );
                } else if ( !thumbnail.canWrite() ) {
                    publish( line + "   isn't modifiable --> Can't delete --> you have to delete this file yourself\n" );
                } else {
                    publish( line + "   should be deletable.\n" );
                }

            }
            return null;
        }

        @Override
        protected void done() {
            stopButton.setVisible( false );
            closeButton.setVisible( true );
            if ( !isCancelled() ) {
                publish( "\nRemoval complete.\n" );
            }
        }

        @Override
        protected void process( List<String> chunks ) {
            if ( firsttime ) {
                lowresUrls.setText( "" );
                firsttime = false;
            }
            for ( String chunk : chunks ) {
                lowresUrls.append( chunk );
            }
        }

    }

}
