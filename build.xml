<?xml version="1.0"?>
<project name="Java Picture Organizer" default="run">
    
    <property name="app.main.package" value="jpo"/>
    <property name="app.main.class" value="Main"/>
    
    <property name="build.dir" value="build"/>
    <property name="build.base.classes.dir" value="${build.dir}/classes"/>
    <property name="unit.test.classes.dir" value="${build.dir}/unittestclasses"/>
    <property name="junit.dir" value="/usr/share/java/junit.jar"/>
    <property name="jsch.dir" value="/usr/share/java/jsch.jar"/>
    <property name="build.images.dir" value="${build.base.classes.dir}/${app.main.package}/images"/>
    <property name="build.dtd.dir" value="${build.base.classes.dir}/${app.main.package}"/>
    <property name="build.export.dir" value="${build.base.classes.dir}/${app.main.package}/export"/>
    <property name="build.docs.dir" value="${build.dir}/docs"/>
    <property name="build.jars.dir" value="${build.dir}/jars"/>
    <property name="version" value="0.11"/>
    
    <property name="libs.dir" value="libs"/>
    <property name="src.dir" value="src"/>
    <property name="src.java.dir" value="${src.dir}/java"/>
    <property name="src.images.dir" value="${src.dir}/images"/>
    <property name="src.docs.dir" value="${src.dir}/docsrc"/>
    <property name="src.dtd.dir" value="${src.dir}/dtd"/>
    <property name="src.unittestimages.dir" value="${src.dir}/test/images"/>
    <property name="testdir" value="${src.dir}/test/java"/>
    <property name="results" location="/tmp"/>
    
    <property name="TALK" value="true" />
    <path id="classpath">
        <pathelement location="${build.base.classes.dir}"/>
        <fileset dir="${libs.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!--  Load the javaKeyStore, javaKeyStorePassword and sourceforgeSshCertificate
    properties from a private properties file which I deliberately don't contribute.... -->
    <property file="/richi/Privat/Documents/jpoPrivate.properties"/>

    <echo message="${ant.version} is using the "/>
    <echo message="build file ${ant.file} to build the project"/>
    <echo message="&quot;${ant.project.name}&quot; Use the &quot;-debug&quot; switch to see loads of"/>
    <echo message="debug information, &quot;ant --help&quot; reminds you of what other options"/>
    <echo message="there are and &quot;ant -p&quot; tells you what targets this build file supports."/>
    
    <!-- <echo message="The base directory for the project         ${basedir}"/> -->
    <!-- <echo message="The java source files are being read from: ${src.java.dir}"/> -->
    <!-- <echo message="The compiled Java .class files will go to: ${build.base.classes.dir}"/> -->
    <!-- <echo message="The new jar file will go to:               ${build.jars.dir}"/> -->


    <target name="prepare" description="Makes the build directory tree with mkdir">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.base.classes.dir}"/>
        <mkdir dir="${build.docs.dir}"/>
        <mkdir dir="${build.jars.dir}"/>
    </target>
    
    <target name="clean" description="Deletes the build directory and all classes and jars contained in it" >
        <delete verbose="${TALK}">
            <fileset dir="${testdir}" includes="**/*.class" />
        </delete>
        <delete dir="${build.dir}"/>
    </target>

        
    <target name="cleanupSource" description="Deletes the ~ files that some editors create" >
        <delete verbose="${TALK}">
            <fileset dir="${src.java.dir}/jpo/" includes="*~" defaultexcludes="no" />
        </delete>
    </target>

    
    <target name="compile"
            depends="prepare"
            description="Compiles the .java files">
        <javac destdir="${build.base.classes.dir}"
               debug="true"
               optimize="off"
               verbose="off"
               fork="yes"
               listfiles="yes"
               deprecation="yes"
               source="1.6"
               target="1.6"
               includeantruntime="false"
               encoding="UTF-8" >
            <src path="${src.java.dir}"/>
            <classpath refid="classpath"/>
            <compilerarg value="-Xlint:unchecked" />
        </javac>
        <copy todir="${build.images.dir}">
            <fileset dir="${src.images.dir}">
                <include name="**/*.gif"/>
                <include name="**/*.jpg"/>
            </fileset>
        </copy>
        <copy todir="${build.dtd.dir}">
            <fileset dir="${src.dtd.dir}">
                <include name="**/*.dtd"/>
                <include name="**/gpl.txt"/>
            </fileset>
        </copy>
        <copy todir="${build.export.dir}">
            <fileset dir="${src.dtd.dir}">
                <include name="**/robots.txt"/>
                <include name="**/jpo.css"/>
                <include name="**/jpo.js"/>
                <include name="**/googlemaps.*"/>
            </fileset>
        </copy>
    </target>
    
    
    <target name="javadoc"
            description="Creates the JavaDoc of the project">
        <copy todir="${build.docs.dir}">
            <fileset dir="${src.docs.dir}">
                <include name="**/*.png"/>
            </fileset>
        </copy>
        <javadoc destdir="${build.docs.dir}"
                 packagenames="*"
                 Overview="${src.docs.dir}/Overview.html"
                 Doctitle="JPO application documentation"
                 Windowtitle="JPO application documentation"
                 Header="JPO application documentation"
                 Bottom="&lt;font size=&quot;-1&quot;&gt;Copyright (c) 2002 - 2013 by Richard Eigenmann &lt;a href=&quot;http://richieigenmann.users.sourceforge.net/&quot;&gt;http://richieigenmann.users.sourceforge.net/&lt;/a&gt;&lt;/font&gt;"
                 author="true"
                 version="true"
                 use="true"
                 private="true"
                 source="1.6"
                 linksource="yes"
        >
            <sourcepath path="${src.java.dir}" />
            <classpath refid="classpath"/>
        </javadoc>
    </target>
    
    
    <target name="go"
            depends="compile, run"
            description="Compile and run the project"/>
    
    
    <target name="buildjar" depends="clean, cleanupSource, compile, test" description="Builds the  file containing the Jpo Classes">
        <jar destfile="${build.jars.dir}/jpo-${version}.jar"
             basedir="${build.base.classes.dir}"
             compress="no"
             duplicate="fail" >
            <manifest>
                <attribute name="Main-Class" value="${app.main.class}"/>
                <attribute name="Class-Path" value="activation.jar jnlp.jar commons-compress-1.2.jar commons-net-3.2.jar gdata-core-1.0.jar gdata-maps-2.0.jar gdata-media-1.0.jar gdata-photos-2.0.jar guava-13.0.jar jnlp.jar jwizz-0.1.4.jar mail.jar metadata-extractor-2.6.4.jar miglayout-4.0.jar xmpcore.jar" />
                <section name="Copyright">
                    <attribute name="Copy" value="(c) 2001-2013, Richard Eigenmann, ZÃ¼rich, Switzerland"/>
                </section>
            </manifest>
        </jar>
        <copy todir="${build.jars.dir}">
            <fileset dir="${libs.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    </target>

    
    <!-- This target signs the unsinged jars so that they can be used in the Java Web Start context.
         You need to have a Java Keystore
                <include name="activation.jar"/>
                <include name="mail.jar"/>
    -->
    <target name="signjar" depends="buildjar" description="Signs the jar files">
        <signjar alias="richi"
                 keystore="${javaKeyStore}"
                 storepass="${javaKeyStorePassword}" >
            <fileset dir="${build.jars.dir}">
                <include name="jpo-${version}.jar"/>
                <include name="commons-compress-1.2.jar"/>
                <include name="commons-net-3.2.jar" />
                <include name="gdata-core-1.0.jar"/>
                <include name="gdata-maps-2.0.jar"/>
                <include name="gdata-media-1.0.jar"/>
                <include name="gdata-photos-2.0.jar"/>
                <include name="guava-13.0.jar"/>
                <include name="jnpl.jar"/>
                <include name="jsch-0.1.49.jar"/>
                <include name="jwizz-0.1.4.jar"/>
                <include name="metadata-extractor-2.6.4.jar"/>
                <include name="miglayout-4.0.jar"/>
                <include name="xmpcore.jar"/>
            </fileset>

        </signjar>
    </target>


    <target name="runjar" description="Runs the program from the jar" depends="buildjar">
        <java jar="${build.jars.dir}/jpo-${version}.jar"
              fork="yes"
        >
        </java>
    </target>
    


    <!-- This target will only be of use to the person who does the deployment
    of JPO to souceforge.  -->
    <target name="publish-javadoc" depends="javadoc" description="Publishes the latest Javadoc to the SourceForge project">

        <scp todir="richieigenmann,j-po@web.sourceforge.net:/home/groups/j/j-/j-po/htdocs/javadoc"
             trust="yes"
             verbose="no"
             keyfile="${sourceforgeSshCertificate}"
             passphrase=""
             sftp="true">
            <fileset dir="${build.docs.dir}">
                <modified>
                    <param name="cache.cachefile" value="/tmp/Sourceforge-Jpo-Javadocache" />
                </modified>
            </fileset>
        </scp>
    </target>
    
    
    <!-- pushes the jpo jar to sourceforge  -->
    <target name="publish-jar" depends="signjar"  description="Publishes the lates Jpo Version to the SourceForge project">
        <scp todir="richieigenmann,j-po@web.sourceforge.net:/home/groups/j/j-/j-po/htdocs"
             trust="yes"
             verbose="no"
             keyfile="${sourceforgeSshCertificate}"
             passphrase=""
             sftp="true">
            <fileset dir="${build.jars.dir}">
                <modified>
                    <param name="cache.cachefile"  value="/tmp/Sourceforge-Jpo-Jarcache" />
                </modified>
                <include name="*.jar" />
            </fileset>
            <fileset dir="web">
                <modified>
                    <param name="cache.cachefile"  value="/tmp/Sourceforge-Jpo-JNLPcache" />
                </modified>
                <include name="*.jnlp" />
            </fileset>
        </scp>
    </target>


    <!-- This target will only be of use to the person who does the deployment
    of JPO to souceforge.  -->
    <target name="publish-webpages" description="Publishes the latest Jpo web pages SourceForge project">

        <scp todir="richieigenmann,j-po@web.sourceforge.net:/home/groups/j/j-/j-po/htdocs"
             trust="yes"
             verbose="yes"
             keyfile="${sourceforgeSshCertificate}"
             passphrase=""
             sftp="true">
            <fileset dir="web">
                <modified>
                    <param name="cache.cachefile"  value="/tmp/Sourceforge-Jpo-Webpagecache" />
                </modified>
                <include name="*.html" />
                <include name="*.php" />
                <include name="fontconfig" />
                <include name="*.gif" />
                <include name="*.png" />
                <include name="*.jpg" />
                <include name="*.jnlp" />
                <include name="*.bat" />
            </fileset>
        </scp>
    </target>


    <target name="publish" depends="publish-jar, publish-javadoc, publish-webpages" description="Publishes the lates Jpo Version and webpages to the SourceForge project"/>

    
    <target name="run" description="Runs the program" depends="compile">
        <java classname="${app.main.class}"
              fork="yes"
              maxmemory="2000m">
            <!-- add for debugging: jvmargs="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8888,suspend=n" -->
            <classpath refid="classpath"/>
        </java>
    </target>



    
    <target name="compile-test" depends="JUNIT, compile" description="Compiles the JUnit test cases">
        <mkdir dir="${unit.test.classes.dir}"/>
        <javac srcdir="${testdir}"
               verbose="${TALK}"
               destdir="${unit.test.classes.dir}"
               includeantruntime="false"
        >
            <classpath refid="classpath"/>
            <classpath>
                <pathelement location="${unit.test.classes.dir}" />
                <pathelement location="${junit.dir}" />
            </classpath>
        </javac>
        <copy todir="${unit.test.classes.dir}">
            <fileset dir="${src.unittestimages.dir}">
                <include name="**/*.gif"/>
                <include name="**/*.jpg"/>
            </fileset>
        </copy>
    </target>
    
    
    <target name="test-single-gaga" description="Run individual Unit tests"  >  <!-- depends="compile-test" -->
        <property name="junit-text" value="junit.textui.TestRunner"/>
        <property name="junit-swing" value="junit.swingui.TestRunner"/>
        <java fork="true" classname="${junit-text}"
              taskname="junit" failonerror="true">
            <arg value="jpo.CategoryTest" />
            <arg value="jpo.ApplicationJMenuBarTest" />
            <classpath>
                <classpath refid="classpath"/>
                <classpath location="/usr/share/java/junit-3.8.2.jar"></classpath>
                <pathelement location="${build.base.classes.dir}" />
                <pathelement location="${unit.test.classes.dir}" />
                <pathelement path="libs/metadata-extractor-2.6.4.jar; libs/jnlp.jar; libs/jsch-0.1.49.jar;libs/activation.jar; libs/mail.jar" />
                <pathelement path="${java.class.path}" />
                <pathelement location="${junit.dir}" />
            </classpath>
        </java>
    </target>
    
    <!-- To run from the command line: ant -Dtest.class=jpo.dataModel.ExifInfo test-single -->
    <target name="test-single" description="Run individual Unit tests" depends="compile, compile-test" >  
        <junit
            printsummary="yes"
            errorProperty="test.failed"
            failureproperty="test.failed"
            haltonfailure="yes" 
            fork="yes"
            showoutput="yes">
            <formatter type="plain" usefile="false"/>
            <classpath>
                <pathelement location="${unit.test.classes.dir}" />
                <pathelement location="${junit.dir}" />
            </classpath>
            <classpath refid="classpath"/>
            <test name="${test.class}Test" todir="${results}">
            </test>
        </junit>
        <fail message="Tests failed!" if="test.failed"/>
    </target>
    
    <target name="test" depends="compile-test" description="Runs the unit tests">
        <!-- <splash imageurl="http://www.bar-solutions.com/software/ant_splash.jpg"
        showduration="5000"/> -->
        <junit
            printsummary="yes"
            errorProperty="test.failed"
            failureproperty="test.failed"
            haltonfailure="yes" 
            fork="yes"
            showoutput="yes">
            <formatter type="plain" usefile="false"/>
            <classpath>
                <pathelement location="${build.base.classes.dir}" />
                <pathelement location="${unit.test.classes.dir}" />
                <pathelement path="/usr/share/java/junit.jar;libs/metadata-extractor-2.6.4.jar; libs/jnlp.jar; libs/jsch-0.1.49.jar;libs/activation.jar; libs/mail.jar" />
                <pathelement location="${junit.dir}" />
            </classpath>
            <batchtest todir="${results}">
                <fileset dir="${unit.test.classes.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
        <fail message="Tests failed!" if="test.failed"/>
    </target>
    
    
    <target name="JUNIT" description="Checks if JUnit is available">
        <available property="junit.present" classname="junit.framework.TestCase" classpath="${junit.dir}" />
        <echo message="Testing if JUnit is present: ${junit.present}" />
    </target>
    
    <target name="JSCH" description="Checks if JSch is available">
        <available property="jsch.present" classname="com.jcraft.jsch.JSch" classpath="${junit.dir}"  />
        <echo message="Testing if JSch is present: ${jsch.present}" />
    </target>
    
    
    <target name="antstructure" description="Generated a dtd of the ant tasks">
        <antstructure output="build/antstructure.dtd" />
    </target>

    <target name="splash">
        <splash imageurl="http://jakarta.apache.org/images/jakarta-logo.gif"
                showduration="5000"/>
    </target>
    
</project>
