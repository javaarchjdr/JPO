buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

plugins {
    id "org.sonarqube" version "2.7.1"
    id "com.github.ben-manes.versions" version "0.22.0"
    id 'signing'
    id 'java'
    //id 'application'
    id 'jacoco'
    //id 'org.gradle.java.experimental-jigsaw' version '0.1.1'
    //id 'com.zyxist.chainsaw' version '0.3.1'
}

apply plugin: "com.github.johnrengelman.shadow"
//apply plugin: 'java'
//apply plugin: "jacoco"

sourceCompatibility = 1.9
targetCompatibility = 1.9
//version = '0.14'

//ext.moduleName = 'org.jpo.dataModel'

//javaModule.name = 'org.jpo.cache'

compileJava {
    options.encoding = "UTF-8"
//    inputs.property("moduleName", moduleName)
//    doFirst {
//        options.compilerArgs = [
//            '--module-path', classpath.asPath,
//        ]
//        classpath = files()
//    }
}
compileTestJava {
    options.encoding = "UTF-8"
//    inputs.property("moduleName", moduleName)
//    doFirst {
//        options.compilerArgs = [
//            '--module-path', classpath.asPath,
//            '--add-modules', 'junit',
//            '--add-reads', "$moduleName=junit",
//            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
//        ]
//        classpath = files()
//    }
}
javadoc {options.encoding = "UTF-8"}

task openJavadocInBrowser {
    dependsOn 'javadoc'
    doLast {
        java.awt.Desktop.desktop.open(new File(buildDir, "/docs/javadoc/index.html"))
    }
}

repositories {
    mavenCentral()
    jcenter()
}

def jpoVersion = '0.14'

dependencies {
    implementation 'org.apache.commons:commons-compress:1.18'
    implementation 'org.apache.directory.studio:org.apache.commons.io:2.4'
    implementation 'org.apache.commons:commons-jcs-core:2.2.1'
    implementation 'org.apache.commons:commons-jcs-jcache:2.2.1'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.apache.commons:commons-text:1.7'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'commons-net:commons-net:3.6'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.google.gdata:core:1.47.1'

    implementation files('libs/gdata-maps-2.0.jar')
    implementation files('libs/gdata-media-1.0.jar')
    implementation files('libs/gdata-photos-2.0.jar')

    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'javax.mail:javax.mail-api:1.6.2'
    implementation 'com.jcraft:jsch:0.1.55'

    implementation files('libs/jwizz-0.1.4.jar')

    implementation 'org.jxmapviewer:jxmapviewer2:2.4'
    implementation 'com.drewnoakes:metadata-extractor:2.12.0'

    implementation 'com.miglayout:miglayout-swing:5.2'

    // needed to pull down 1.1.3p1 from 5 May 2018 from http://www.docking-frames.org/download.html
    // Maven dependencies don't work
    //implementation group: 'org.dockingframes', name: 'docking-frames-core', version: '1.1.2p6a'
    //implementation group: 'org.dockingframes', name: 'docking-frames-common', version: '1.1.2p6a'
    implementation files('libs/docking-frames-common.jar')
    implementation files('libs/docking-frames-core.jar')

    implementation files('libs/TagCloud.jar')
    
    //used by Metadata Extractor. Note only 5.x seems to be compatible
    //implementation 'com.adobe.xmp:xmpcore:5.1.3'
    //implementation 'com.adobe.xmp:xmpcore:6.1.10'
    implementation 'org.jetbrains:annotations:17.0.0'

    implementation 'com.twelvemonkeys.imageio:imageio-batik:3.4.2'
    implementation 'org.apache.xmlgraphics:batik-transcoder:1.11'
    implementation 'org.apache.xmlgraphics:batik-anim:1.11'
    implementation 'org.apache.xmlgraphics:batik-rasterizer-ext:1.11'
    implementation 'org.apache.xmlgraphics:batik-extension:1.11'
    implementation 'org.apache.xmlgraphics:xmlgraphics-commons:2.3'
    implementation 'org.apache.xmlgraphics:batik-svggen:1.11'
    implementation 'com.twelvemonkeys.imageio:imageio-bmp:3.4.2'
    //implementation 'com.twelvemonkeys.imageio:imageio-clippath:3.4.1' //OK -- But what does it do?
    implementation 'com.twelvemonkeys.imageio:imageio-icns:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-iff:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-jpeg:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-hdr:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-pcx:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-pdf:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-pict:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-pnm:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-psd:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-sgi:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-tiff:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-tga:3.4.2'
    implementation 'com.twelvemonkeys.imageio:imageio-thumbsdb:3.4.2'
    testImplementation "junit:junit:4.13-beta-3"
}


sourceSets {
    main {
        resources {
            srcDir 'src/images'
            include '**/*.gif'
            include '**/*.jpg'
            
            srcDir 'src/dtd'
            include '**/*.dtd'
            include '**/*.txt'
            include '**/*.css'
            include '**/*.js'
                
            srcDir 'src/main/java/org/jpo/cache'
            include '**/*.ccf'
        }
    }
    test {
        main
        resources  {
            srcDir 'src/test/images'
            include '**/*.jpg'
            include '**/*.tiff'
            include '**/*.hdr'
            include '**/*.pdf'
            include '**/*.svg'
            include '**/*.bmp'
            include '**/*.pnm'
            include '**/*.sgi'
            include '**/*.tga'
            include '**/*.psd'
            include '**/*.ico'
            include '**/*.png'
            include '**/*.gif'
            include '**/*.iff'
            include '**/*.pcx'
            include '**/*.pct'
            include '**/*.icns'
            include '**/*.db'
        }
    }
}
    

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
//    inputs.property("moduleName", moduleName)
//    doFirst {
//        jvmArgs = [
//                '--module-path', classpath.asPath,
//                '--add-modules', 'ALL-MODULE-PATH',
//                '--add-reads', "$moduleName=junit",
//                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
//        ]
//        classpath = files()
//    }
}

jar {
//    baseName = 'org.jpo'
//    version =  jpoVersion
    
    manifest {
        attributes(
            "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '),
            "Main-Class": 'org.jpo.Main',
            'Permissions': 'all-permissions'
        )
        attributes(
            [ "Copy": "(c) 2001-2019, Richard Eigenmann, ZÃ¼rich, Switzerland" ], "Copyright"
        )
    }
    into ('org/jpo/images') { from 'src/images' }
}

// this task creates the FatJar with everything in it
shadowJar {
//    baseName = 'org.jpo'
//    classifier = 'all'
//    version = jpoVersion
    into ('org/jpo/images') { from 'src/images' }
    mergeServiceFiles()
}



task signJar(dependsOn: 'shadowJar',description: 'Sign shadowJar.',group: 'build'){
    doLast{
        def props = new Properties()
        file("/richi/Privat/Documents/jpo.private.gradle.properties").withInputStream { props.load(it) }
        println 'Keystore file name: ' + props.getProperty("keystoreFileName")

        File signdir  = new File("$buildDir/jars/signed") as File
        signdir.mkdirs()

        ant.signjar(
            destDir: "${signdir.absolutePath}",
                  jar: 'build/libs/org.jpo-all.jar',
                  alias: props.getProperty("keyalias"),
                  storetype: "jks",
                  keystore: props.getProperty("keystoreFileName"),
                  storepass: props.getProperty("keystorepass"),
                  verbose: true,
                  preservelastmodified: "true",
                  tsaurl: "http://timestamp.digicert.com"
      )
    }
}

task buildWindowsExecutable(type: Exec) {
    dependsOn shadowJar
    File exedir  = new File("$buildDir/executables") as File
    exedir.mkdirs()
    commandLine '/usr/bin/makensis', '-XOutFile ' + exedir + '/Jpo.exe', 'Windowsbuilder/jpoexe.nsi'
}

task buildWindowsInstaller(type: Exec) {
    dependsOn buildWindowsExecutable
    File exedir  = new File("$buildDir/executables") as File
    workingDir exedir.toString()
    commandLine '/usr/bin/makensis', 
        '-XOutFile ' + exedir + '/JPO-Installer-0.14.exe',
        projectDir.absolutePath + '/Windowsbuilder/jpoinstaller.nsi'
}


task run(type: JavaExec) {
    group 'build'
    description 'Runs JPO from the shadowJar'
    dependsOn shadowJar
    classpath = files( 'build/libs/Jpo-all.jar' )
    main = 'org.jpo.Main'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport


configurations {
  sshAntTask
}

dependencies {
    sshAntTask 'org.apache.ant:ant-jsch:1.10.6', 'com.jcraft:jsch:0.1.55'
}

ant.taskdef(
    name: 'scp',
    classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
    classpath: configurations.sshAntTask.asPath)

task uploadWebsitePages() {
    group 'website'
    description 'Publishes the JPO website pages'
    doLast  {
        ant.scp(
            todir: 'richieigenmann,j-po@web.sourceforge.net:/home/groups/j/j-/j-po/htdocs',
            keyfile: '${user.home}/.ssh/id_rsa',
            passphrase: '',
            trust: 'yes',
            verbose: 'yes',
            sftp: 'true', {
                fileset(dir: 'web') {
                    modified()
                    include(name: '*.html')
                    include(name: '*.css')
                    include(name: '*.php')
                    include(name: 'fontconfig')
                    include(name: '*.gif')
                    include(name: '*.png')
                    include(name: '*.jpg')
                    include(name: '*.jnlp')
                    include(name: '*.bat')
                }
            }
        )
    }
}

task uploadWebStartFiles() {
    group 'website'
    description 'Publishes the JPO webstart files'
    dependsOn signJar
    doLast  {
        ant.scp(
            todir: 'richieigenmann,j-po@web.sourceforge.net:/home/groups/j/j-/j-po/htdocs',
            keyfile: '${user.home}/.ssh/id_rsa',
            passphrase: '',
            trust: 'yes',
            verbose: 'yes',
            sftp: 'true', {
                fileset(dir: 'build/jars/signed') {
                    modified()
                    files( 'org.jpo-' + jpoVersion + '-all.jar' )
                }
                fileset(dir: 'web') {
                    modified()
                    files( 'org.jpo-' + jpoVersion + '.jnlp' )
                }
            }
        )
    }
}

task uploadJavadoc() {
    group 'website'
    description 'Publishes the JPO website pages'
    dependsOn javadoc
    doLast  {
        ant.scp(
            todir: 'richieigenmann,j-po@web.sourceforge.net:/home/groups/j/j-/j-po/htdocs/',
            keyfile: '${user.home}/.ssh/id_rsa',
            passphrase: '',
            trust: 'yes',
            verbose: 'yes',
            sftp: 'true', {
                fileset(dir: 'build/docs/') {
                    modified()
                }
            }
        )
    }
}

task uploadWindowsInstaller() {
    group 'website'
    description 'Publishes the JPO Windows Installer files'
    dependsOn buildWindowsInstaller
    doLast  {
        ant.scp(
            todir: 'richieigenmann,j-po@web.sourceforge.net:/home/frs/project/j-po/',
            keyfile: '${user.home}/.ssh/id_rsa',
            passphrase: '',
            trust: 'yes',
            verbose: 'yes',
            sftp: 'true', {
                fileset(dir: 'build/executables') {
                    modified()
                    include(name: 'JPO-Installer-' + jpoVersion + '.exe' )
                }
            }
        )
    }
}


task uploadWebsite() {
    group 'website'
    description 'Publishes the JPO website'
    dependsOn uploadWebStartFiles, uploadWebsitePages, uploadJavadoc, uploadWindowsInstaller
}


allprojects { // Projects
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}